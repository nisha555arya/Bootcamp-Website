{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\r\n     * This `theme` object needs to follow a certain structure to\r\n     * be used correctly by the finel `CssVarsProvider`. It should have a\r\n     * `colorSchemes` key with the light and dark (and any other) palette.\r\n     * It should also ideally have a vars object created using `prepareCssVars`.\r\n     */\n    theme: defaultTheme = {},\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    defaultColorScheme,\n    resolveTheme\n  } = options;\n  const defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: () => {},\n    setMode: () => {},\n    systemMode: undefined\n  };\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const initialTheme = React.useMemo(() => {\n      if (themeProp) {\n        return themeProp;\n      }\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    const scopedTheme = initialTheme[themeId];\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix,\n      ...restThemeProp\n    } = scopedTheme || initialTheme;\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? 'system' : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    // `colorScheme` is undefined on the server and hydration phase\n    const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\n\n    // 2. get the `vars` object that refers to the CSS custom properties\n    const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;\n\n    // 3. Start composing the theme object\n    const theme = {\n      ...restThemeProp,\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: themeVars\n    };\n    if (typeof theme.generateSpacing === 'function') {\n      theme.spacing = theme.generateSpacing();\n    }\n\n    // 4. Resolve the color scheme and merge it to the theme\n    if (calculatedColorScheme) {\n      const scheme = colorSchemes[calculatedColorScheme];\n      if (scheme && typeof scheme === 'object') {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = {\n              ...theme[schemeKey],\n              ...scheme[schemeKey]\n            };\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n      }\n    }\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        const selector = colorSchemeSelector;\n        let rule = colorSchemeSelector;\n        if (selector === 'class') {\n          rule = `.%s`;\n        }\n        if (selector === 'data') {\n          rule = `[data-%s]`;\n        }\n        if (selector?.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = `[${selector}=\"%s\"]`;\n        }\n        if (rule.startsWith('.')) {\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n          if (matches) {\n            const [attr, value] = matches[1].split('=');\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(scheme => {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsx(React.Fragment, {\n        children: (theme.generateStyleSheets?.() || []).map((styles, index) => /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: styles\n        }, index))\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\r\n     * The component tree.\r\n     */\n    children: PropTypes.node,\n    /**\r\n     * The node used to attach the color-scheme attribute\r\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\r\n     * localStorage key used to store `colorScheme`\r\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\r\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\r\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\r\n     * If `true`, the style sheet won't be generated.\r\n     *\r\n     * This is useful for controlling nested CssVarsProvider behavior.\r\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\r\n     * Disable CSS transitions when switching between modes or color schemes.\r\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\r\n     * The document to attach the attribute to.\r\n     */\n    documentNode: PropTypes.any,\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\n    modeStorageKey: PropTypes.string,\n    /**\r\n     * The window that attaches the 'storage' event listener.\r\n     * @default window\r\n     */\n    storageWindow: PropTypes.any,\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["React","PropTypes","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","InitColorSchemeScript","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","disableTransitionOnChange","designSystemTransitionOnChange","defaultColorScheme","resolveTheme","defaultContext","allColorSchemes","colorScheme","undefined","darkColorScheme","lightColorScheme","mode","setColorScheme","setMode","systemMode","ColorSchemeContext","createContext","process","env","NODE_ENV","displayName","useColorScheme","useContext","CssVarsProvider","props","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","initialTheme","useMemo","scopedTheme","colorSchemes","components","cssVarPrefix","restThemeProp","joinedColorSchemes","Object","keys","filter","k","join","split","defaultLightColorScheme","light","defaultDarkColorScheme","dark","defaultMode","palette","stateMode","stateColorScheme","supportedColorSchemes","calculatedColorScheme","themeVars","generateThemeVars","vars","generateSpacing","spacing","scheme","forEach","schemeKey","colorSchemeSelector","useEffect","selector","rule","startsWith","includes","classList","remove","map","substring","replace","add","matches","match","attr","value","removeAttribute","setAttribute","timer","current","css","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","shouldGenerateStyleSheet","cssVariables","element","Fragment","generateStyleSheets","styles","index","Provider","propTypes","node","any","string","bool","object","getInitColorSchemeScript","params"],"sources":["D:/React js/techun/node_modules/@mui/system/cssVars/createCssVarsProvider.js"],"sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GlobalStyles } from '@mui/styled-engine';\r\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\r\nimport ThemeProvider from \"../ThemeProvider/index.js\";\r\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\r\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\r\nexport default function createCssVarsProvider(options) {\r\n  const {\r\n    themeId,\r\n    /**\r\n     * This `theme` object needs to follow a certain structure to\r\n     * be used correctly by the finel `CssVarsProvider`. It should have a\r\n     * `colorSchemes` key with the light and dark (and any other) palette.\r\n     * It should also ideally have a vars object created using `prepareCssVars`.\r\n     */\r\n    theme: defaultTheme = {},\r\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\r\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\r\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\r\n    defaultColorScheme,\r\n    resolveTheme\r\n  } = options;\r\n  const defaultContext = {\r\n    allColorSchemes: [],\r\n    colorScheme: undefined,\r\n    darkColorScheme: undefined,\r\n    lightColorScheme: undefined,\r\n    mode: undefined,\r\n    setColorScheme: () => {},\r\n    setMode: () => {},\r\n    systemMode: undefined\r\n  };\r\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\r\n  }\r\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\r\n  function CssVarsProvider(props) {\r\n    const {\r\n      children,\r\n      theme: themeProp,\r\n      modeStorageKey = defaultModeStorageKey,\r\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\r\n      disableTransitionOnChange = designSystemTransitionOnChange,\r\n      storageWindow = typeof window === 'undefined' ? undefined : window,\r\n      documentNode = typeof document === 'undefined' ? undefined : document,\r\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\r\n      disableNestedContext = false,\r\n      disableStyleSheetGeneration = false\r\n    } = props;\r\n    const hasMounted = React.useRef(false);\r\n    const upperTheme = muiUseTheme();\r\n    const ctx = React.useContext(ColorSchemeContext);\r\n    const nested = !!ctx && !disableNestedContext;\r\n    const initialTheme = React.useMemo(() => {\r\n      if (themeProp) {\r\n        return themeProp;\r\n      }\r\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\r\n    }, [themeProp]);\r\n    const scopedTheme = initialTheme[themeId];\r\n    const {\r\n      colorSchemes = {},\r\n      components = {},\r\n      cssVarPrefix,\r\n      ...restThemeProp\r\n    } = scopedTheme || initialTheme;\r\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\r\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\r\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\r\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\r\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? 'system' : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;\r\n\r\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\r\n    const {\r\n      mode: stateMode,\r\n      setMode,\r\n      systemMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme: stateColorScheme,\r\n      setColorScheme\r\n    } = useCurrentColorScheme({\r\n      supportedColorSchemes: allColorSchemes,\r\n      defaultLightColorScheme,\r\n      defaultDarkColorScheme,\r\n      modeStorageKey,\r\n      colorSchemeStorageKey,\r\n      defaultMode,\r\n      storageWindow\r\n    });\r\n    let mode = stateMode;\r\n    let colorScheme = stateColorScheme;\r\n    if (nested) {\r\n      mode = ctx.mode;\r\n      colorScheme = ctx.colorScheme;\r\n    }\r\n\r\n    // `colorScheme` is undefined on the server and hydration phase\r\n    const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\r\n\r\n    // 2. get the `vars` object that refers to the CSS custom properties\r\n    const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;\r\n\r\n    // 3. Start composing the theme object\r\n    const theme = {\r\n      ...restThemeProp,\r\n      components,\r\n      colorSchemes,\r\n      cssVarPrefix,\r\n      vars: themeVars\r\n    };\r\n    if (typeof theme.generateSpacing === 'function') {\r\n      theme.spacing = theme.generateSpacing();\r\n    }\r\n\r\n    // 4. Resolve the color scheme and merge it to the theme\r\n    if (calculatedColorScheme) {\r\n      const scheme = colorSchemes[calculatedColorScheme];\r\n      if (scheme && typeof scheme === 'object') {\r\n        // 4.1 Merge the selected color scheme to the theme\r\n        Object.keys(scheme).forEach(schemeKey => {\r\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\r\n            // shallow merge the 1st level structure of the theme.\r\n            theme[schemeKey] = {\r\n              ...theme[schemeKey],\r\n              ...scheme[schemeKey]\r\n            };\r\n          } else {\r\n            theme[schemeKey] = scheme[schemeKey];\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // 5. Declaring effects\r\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\r\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\r\n    React.useEffect(() => {\r\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\r\n        const selector = colorSchemeSelector;\r\n        let rule = colorSchemeSelector;\r\n        if (selector === 'class') {\r\n          rule = `.%s`;\r\n        }\r\n        if (selector === 'data') {\r\n          rule = `[data-%s]`;\r\n        }\r\n        if (selector?.startsWith('data-') && !selector.includes('%s')) {\r\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\r\n          rule = `[${selector}=\"%s\"]`;\r\n        }\r\n        if (rule.startsWith('.')) {\r\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\r\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\r\n        } else {\r\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\r\n          if (matches) {\r\n            const [attr, value] = matches[1].split('=');\r\n            if (!value) {\r\n              // for attributes like `data-theme-dark`, `data-theme-light`\r\n              // remove all the existing data attributes before setting the new one\r\n              allColorSchemes.forEach(scheme => {\r\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\r\n              });\r\n            }\r\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\r\n          } else {\r\n            colorSchemeNode.setAttribute(rule, colorScheme);\r\n          }\r\n        }\r\n      }\r\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);\r\n\r\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\r\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\r\n    React.useEffect(() => {\r\n      let timer;\r\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\r\n        const css = documentNode.createElement('style');\r\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\r\n        documentNode.head.appendChild(css);\r\n\r\n        // Force browser repaint\r\n        (() => window.getComputedStyle(documentNode.body))();\r\n        timer = setTimeout(() => {\r\n          documentNode.head.removeChild(css);\r\n        }, 1);\r\n      }\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\r\n    React.useEffect(() => {\r\n      hasMounted.current = true;\r\n      return () => {\r\n        hasMounted.current = false;\r\n      };\r\n    }, []);\r\n    const contextValue = React.useMemo(() => ({\r\n      allColorSchemes,\r\n      colorScheme,\r\n      darkColorScheme,\r\n      lightColorScheme,\r\n      mode,\r\n      setColorScheme,\r\n      setMode,\r\n      systemMode\r\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\r\n    let shouldGenerateStyleSheet = true;\r\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\r\n      shouldGenerateStyleSheet = false;\r\n    }\r\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\r\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsx(React.Fragment, {\r\n        children: (theme.generateStyleSheets?.() || []).map((styles, index) => /*#__PURE__*/_jsx(GlobalStyles, {\r\n          styles: styles\r\n        }, index))\r\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\r\n        themeId: scopedTheme ? themeId : undefined,\r\n        theme: resolveTheme ? resolveTheme(theme) : theme,\r\n        children: children\r\n      })]\r\n    });\r\n    if (nested) {\r\n      return element;\r\n    }\r\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\r\n      value: contextValue,\r\n      children: element\r\n    });\r\n  }\r\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\r\n    /**\r\n     * The component tree.\r\n     */\r\n    children: PropTypes.node,\r\n    /**\r\n     * The node used to attach the color-scheme attribute\r\n     */\r\n    colorSchemeNode: PropTypes.any,\r\n    /**\r\n     * localStorage key used to store `colorScheme`\r\n     */\r\n    colorSchemeStorageKey: PropTypes.string,\r\n    /**\r\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\r\n     */\r\n    disableNestedContext: PropTypes.bool,\r\n    /**\r\n     * If `true`, the style sheet won't be generated.\r\n     *\r\n     * This is useful for controlling nested CssVarsProvider behavior.\r\n     */\r\n    disableStyleSheetGeneration: PropTypes.bool,\r\n    /**\r\n     * Disable CSS transitions when switching between modes or color schemes.\r\n     */\r\n    disableTransitionOnChange: PropTypes.bool,\r\n    /**\r\n     * The document to attach the attribute to.\r\n     */\r\n    documentNode: PropTypes.any,\r\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\r\n    modeStorageKey: PropTypes.string,\r\n    /**\r\n     * The window that attaches the 'storage' event listener.\r\n     * @default window\r\n     */\r\n    storageWindow: PropTypes.any,\r\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\r\n    theme: PropTypes.object\r\n  } : void 0;\r\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\r\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\r\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\r\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\r\n    defaultLightColorScheme,\r\n    defaultDarkColorScheme,\r\n    modeStorageKey: defaultModeStorageKey,\r\n    ...params\r\n  });\r\n  return {\r\n    CssVarsProvider,\r\n    useColorScheme,\r\n    getInitColorSchemeScript\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}